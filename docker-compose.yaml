version: "3.9"
services:
  elasticsearch:
    image: elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
    volumes:
      - ./es_data:/usr/share/elasticsearch/data
    ports:
      - target: 9200
        published: 9200
    networks:
      - ekl

  kibana:
    image: kibana:${ELASTIC_VERSION}
    container_name: kibana
    hostname: kibana
    environment:
      - ELASTICSEARCH_HOSTS="http://elasticsearch:9200"
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
    ports:
      - target: 5601
        published: 5601
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://kibana:5601/"]
      retries: 10
      interval: 10s
    depends_on:
      - elasticsearch
    networks:
      - ekl

  apm-server:
    image: docker.elastic.co/apm/apm-server:${ELASTIC_VERSION}
    container_name: amp-server
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
      - 8200:8200
    networks:
      - ekl
    command: >
       apm-server -e
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.rum.enabled=true
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E apm-server.kibana.username=${KIBANA_USERNAME}
         -E apm-server.kibana.password=${KIBANA_PASSWORD}
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
         -E output.elasticsearch.username=${ELASTIC_USERNAME}
         -E output.elasticsearch.password=${ELASTIC_PASSWORD}
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/  

  fleet:
    image: docker.elastic.co/beats/elastic-agent:${ELASTIC_VERSION}
    container_name: fleet
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    hostname: fleet
    restart: always
    user: root
    environment:
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_ELASTICSEARCH_HOST=http://elasticsearch:9200
      - FLEET_SERVER_ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - FLEET_SERVER_INSECURE_HTTP=1
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_HOST=http://kibana:5601
      - KIBANA_FLEET_USERNAME=${KIBANA_USERNAME}
      - KIBANA_FLEET_PASSWORD=${KIBANA_PASSWORD}
      - FLEET_ENROLL=1
    ports:
      - 8220:8220
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - ekl

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    container_name: logstash
    hostname: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
    networks:
      - ekl
    depends_on:
      - elasticsearch
  
volumes:
  es_data:

networks:
  ekl:
    name: ekl
    driver: bridge